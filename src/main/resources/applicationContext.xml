<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--读取properties 配置文件-->
    <context:property-placeholder location="config.properties"/>

    <!--基于注解的bean管理-->
    <!--只需告诉spring你的bean从那些包中导入要管理的类可以
        然后在需要的类头上添加注解
    -->
    <context:component-scan base-package="com.mxiaixy"/>


    <!--如何实现注入-->
    <!--基于注解的IOC-->
    <!--只需在所需注入的类的头上添加@AutowiseJ即可-->


    <!--基于注解的AOP-->
    <!--
        在通知类中加入所需要的注解
        @Aspect:声明类是通知类
    -->
    <aop:aspectj-autoproxy/>


    <!--基于DI的单元测试-->
    <!--每调用一次bean类中的方法 都会加上通知  ！！！！！！！！！！！-->

    <!--配置数据库连接池 数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--JDBCtemplate-->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--添加事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--使用注解方式的事物声明-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--myBatis sqlSessionFactory-->
   <!-- <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        &lt;!&ndash;配置数据连接池（数据源）&ndash;&gt;
        <property name="dataSource" ref="dataSource"/>
        &lt;!&ndash;配置别名&ndash;&gt;
        <property name="typeAliasesPackage" value="com.mxiaixy.pojo"/>
        &lt;!&ndash;配置mapper读取路径 &ndash;&gt;
        <property name="mapperLocations" value="classpath: mapper/*.xml"/>
        &lt;!&ndash;配置其他项&ndash;&gt;
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>
    </bean>

    &lt;!&ndash;配置自动扫描mapper文件&ndash;&gt;
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mxiaixy.mapper"/>
    </bean>-->


    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--添加数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--添加别名  spring会自动生成别名为所在类名-->
        <property name="typeAliasesPackage" value="com.mxiaixy.pojo"/>
        <!--mapper文件所在位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--其他位置-->
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <!--配置可以转换数据库中的下划线为驼峰命名法-->
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>

    </bean>
    <!--添加 自动扫描mapper中的接口 自动创建其实现类 并添加到容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--自动扫描com.mxiaixy.mapper下的接口 并创建其实现类并放入容器中 以便调用-->
        <property name="basePackage" value="com.mxiaixy.mapper"/>
    </bean>







</beans>